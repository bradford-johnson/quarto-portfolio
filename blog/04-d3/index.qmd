---
title: "D3.js with R"
date: "4/19/2023"
description: "Combining D3 and R to visualize "
categories: ["R", "D3.js"]
format:
  html:
    fig-width: 8
    fig-height: 6
editor: visual
highlight-style: github
---

<div>

# Neolithic Founder Crops

This data is from TidyTuesday week 16 and I thought it would be neat to find a way to visualize it via `D3.js` within `R`. I used the `networkD3` package to create this radial network visual that shows 3 of the different founder crop categories, and breaks it down to genus.

The data wrangling took a while as I had to figure out how to get the lists to work... After some trial and error I found that someone had posted a `R` function that could help wrangle data into the specific way you need it. Here is that function:

``` r
rsplit <- function(x) {
  x <- x[!is.na(x[,1]),,drop=FALSE]
  if(nrow(x)==0) return(NULL)
  if(ncol(x)==1) return(lapply(x[,1], function(v) list(name=v)))
  s <- split(x[,-1, drop=FALSE], x[,1])
  unname(mapply(function(v,n) {if(!is.null(v)) list(name=n, children=v) else list(name=n)}, lapply(s, rsplit), names(s), SIMPLIFY=FALSE))
```

This `rsplit()` function will essentially allow you to apply it to objects to get the sublisted outputs. Once you have the output you can simply use the `networkD3` functions to create one of these visuals. I had to use this function multiple times for each of the different crop categories, and then put it all into a data frame to prepare my data.

Finally I had the visual I wanted except for the colors... After more research I ended up finding this bit of code that allowed me to apply custom colors using `js` on the back end.

``` r
colorVector <- c(rep("#96B48C", 235))

jsarray <- paste0('["', paste(colorVector, collapse = '", "'), '"]')
nodeStrokeJS <- JS(paste0('function(d, i) { return ', jsarray, '[i]; }'))
```

I'm happy with the end result, it is dynamic so the text grows when you mouse over it. I think this was a good way to get introduced to some `D3` within the `R` environment. I do think with all of the nodes and text is a bit busy, and I would like in the future to do some highlighting of specific paths. Also I searched and tried some ways to make the visual larger, but could not find a solution. However, overall this little experiment was more of a "proof of concept" and way to get me exposed more to the dynamic aspects of visualizing data.

My goals moving forward are to continue learning and expanding my knowledge (even beyond `R`) in order to create more dynamic and insightful visuals. I want to do more with `D3`, `SQL`, and `Python` so working within those tools is next up!

```{r}
#| code-fold: true
#| message: false
#| warning: false
#| error: false

# load packages
pacman::p_load(tidyverse,
               networkD3,
               igraph,
               htmltools)

# load data
founder_crops <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-04-18/founder_crops.csv')

# wrangle data
# categories <- founder_crops |>
#   select(taxon_source, category) |>
#   group_by(category) |>
#   count() |>
#   arrange(desc(n)) |>
#   drop_na()

grasses <- founder_crops |>
  filter(category == "Grasses") |>
  group_by(category, edibility, genus) |>
  count() |>
  arrange(desc(n)) |>
  mutate(edibility = case_when(edibility = is.na(edibility) ~ "Not Edible",
                               .default = "Edible"))

wild_plants <- founder_crops |>
  filter(category == "Wild plants") |>
  group_by(category, edibility, genus) |>
  count() |>
  arrange(desc(n)) |>
  mutate(edibility = case_when(edibility = is.na(edibility) ~ "Not Edible",
                               .default = "Edible"))

pulses <- founder_crops |>
  filter(category == "Pulses") |>
  group_by(category, edibility, genus) |>
  count() |>
  arrange(desc(n)) |>
  mutate(edibility = case_when(edibility = is.na(edibility) ~ "Not Edible",
                               .default = "Edible"))

fruits <- founder_crops |>
  filter(category == "Fruits/nuts") |>
  group_by(category, edibility, genus) |>
  count() |>
  arrange(desc(n)) |>
  mutate(edibility = case_when(edibility = is.na(edibility) ~ "Not Edible",
                               .default = "Edible")) |>
  select(-n)


rsplit <- function(x) {
  x <- x[!is.na(x[,1]),,drop=FALSE]
  if(nrow(x)==0) return(NULL)
  if(ncol(x)==1) return(lapply(x[,1], function(v) list(name=v)))
  s <- split(x[,-1, drop=FALSE], x[,1])
  unname(mapply(function(v,n) {if(!is.null(v)) list(name=n, children=v) else list(name=n)}, lapply(s, rsplit), names(s), SIMPLIFY=FALSE))
}
split_g <- rsplit(grasses)
split_wp <- rsplit(wild_plants)
split_f <- rsplit(fruits)
split_p <- rsplit(pulses)

test <- list(name = "Founder Crops", children = c(split_g,  split_p, split_wp))
diagonal_plot <- diagonalNetwork(List = test, fontSize = 10, opacity = 0.9)


colorVector <- c(rep("#96B48C", 235))

jsarray <- paste0('["', paste(colorVector, collapse = '", "'), '"]')
nodeStrokeJS <- JS(paste0('function(d, i) { return ', jsarray, '[i]; }'))
radial_plot <- radialNetwork(List = test, fontSize = 12, opacity = 0.95, linkColour = nodeStrokeJS, nodeColour = nodeStrokeJS,
              nodeStroke = nodeStrokeJS, textColour = "#0f120e")

radial_plot

```

</div>
