[
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Seinfeld Scripts\n\n\nText analysis of scripts from the TV series Seinfeld\n\n\n\nBradford Johnson\n\n\nMar 13, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/blog-posts/welcome/index.html",
    "href": "posts/blog-posts/welcome/index.html",
    "title": "Why Quarto?",
    "section": "",
    "text": "Some describe it as magic, and others have not used Quarto. I was introduced to Quarto as it was added to RStudio in an update in July 2022. Once I saw Thomas Mock’s talk Quarto for the curious I knew I had to explore Quarto. I would go into detail about the technical aspects of what Quarto does, but why not show what it can do? This very website is built with Quarto, and so is Quarto’s website.\n\n\nI built this site using RStuido as the environment, but if you prefer something like `VS Code` then you can use the Quarto extension. My site’s code lives in it’s own GitHub repository which you can view by clicking the code icon on the right side of the navigation bar…or here. I use GitHub for version control, but also host my site with GitHub Pages. I bought my domain name and it was simple to get it up and running from there.\nWhen I want to do some sprucing up to my site I create a new branch and edit the branch. Once I edit the files and code I will render my site in RStudio and then push the commits. Finally I will do a pull request and merge the branch with my main branch. GitHub Actions will then publish the site, however you do not need to do the branching. A single commit on the main branch will trigger GitHub Actions and update your site automatically. This means you can edit and publish the edits all from the code editor!\n\n\n\nQuarto documents .qmd are the files that you edit, and they have YAML code blocks at the top of the document that let you control different features such as: titles, what the output is, and many other controls. The output control is very special as you can render a file as .html output for webpages and many other formats! Do you need a slideshow? A .pdf report? A book?\nHere is what the YAML looks like for this blog post!\n---\ntitle: \"Why Quarto?\"\ndate: \"3/03/2023\"\ndescription: \"Why I build my website with Quarto...\"\ncategories: \"Quarto\"\nformat: html\neditor: visual\nhighlight-style: github\n---\nYou can create and run code chunks, this allows you to create reports, KPI dashboards, articles and so much more. I would describe Quarto as a way to share data analytics or knowledge in a meaningful and completely customized way. It is easily integrated into workflows, and you do not even have to know R. You can use Quarto with Python, Julia, Observable or R. Have a team of R users and Python users? They all can work together with Quarto, and even within the same document…\n\n\n\npaste0(R.Version()[c(\"major\",\"minor\")], collapse = \".\")\n\n[1] \"4.2.2\"\n\n\n\n\n\n\nimport sys\nprint(\"Python version\")\n\nPython version\n\nprint (sys.version)\n\n3.11.3 (tags/v3.11.3:f3909b8, Apr  4 2023, 23:49:59) [MSC v.1934 64 bit (AMD64)]\n\n\n\n\n\n#| warning: false\n#| message: false\n\nlibrary(tidyverse)\n\nggplot(data = iris, aes( x = Sepal.Length, y = Sepal.Width,\n                         shape = Species, color = Species)) +\n  geom_point()\n\n\n\n\n\nDid you notice in the code chunk the #|’s? This is how you tell the chunk how to behave, I stopped warnings and messages in that chunk. You can use Quarto as Jupyter notebooks or R Markdown notebooks and render those notebooks to your desired output. Another thing is that you can use a visual editor, all within your development environment, making it that much easier to make some beautiful deliverables or notes for yourself!"
  },
  {
    "objectID": "posts/blog-posts/welcome/index.html#what-is-quarto",
    "href": "posts/blog-posts/welcome/index.html#what-is-quarto",
    "title": "Why Quarto?",
    "section": "",
    "text": "Some describe it as magic, and others have not used Quarto. I was introduced to Quarto as it was added to RStudio in an update in July 2022. Once I saw Thomas Mock’s talk Quarto for the curious I knew I had to explore Quarto. I would go into detail about the technical aspects of what Quarto does, but why not show what it can do? This very website is built with Quarto, and so is Quarto’s website.\n\n\nI built this site using RStuido as the environment, but if you prefer something like `VS Code` then you can use the Quarto extension. My site’s code lives in it’s own GitHub repository which you can view by clicking the code icon on the right side of the navigation bar…or here. I use GitHub for version control, but also host my site with GitHub Pages. I bought my domain name and it was simple to get it up and running from there.\nWhen I want to do some sprucing up to my site I create a new branch and edit the branch. Once I edit the files and code I will render my site in RStudio and then push the commits. Finally I will do a pull request and merge the branch with my main branch. GitHub Actions will then publish the site, however you do not need to do the branching. A single commit on the main branch will trigger GitHub Actions and update your site automatically. This means you can edit and publish the edits all from the code editor!\n\n\n\nQuarto documents .qmd are the files that you edit, and they have YAML code blocks at the top of the document that let you control different features such as: titles, what the output is, and many other controls. The output control is very special as you can render a file as .html output for webpages and many other formats! Do you need a slideshow? A .pdf report? A book?\nHere is what the YAML looks like for this blog post!\n---\ntitle: \"Why Quarto?\"\ndate: \"3/03/2023\"\ndescription: \"Why I build my website with Quarto...\"\ncategories: \"Quarto\"\nformat: html\neditor: visual\nhighlight-style: github\n---\nYou can create and run code chunks, this allows you to create reports, KPI dashboards, articles and so much more. I would describe Quarto as a way to share data analytics or knowledge in a meaningful and completely customized way. It is easily integrated into workflows, and you do not even have to know R. You can use Quarto with Python, Julia, Observable or R. Have a team of R users and Python users? They all can work together with Quarto, and even within the same document…\n\n\n\npaste0(R.Version()[c(\"major\",\"minor\")], collapse = \".\")\n\n[1] \"4.2.2\"\n\n\n\n\n\n\nimport sys\nprint(\"Python version\")\n\nPython version\n\nprint (sys.version)\n\n3.11.3 (tags/v3.11.3:f3909b8, Apr  4 2023, 23:49:59) [MSC v.1934 64 bit (AMD64)]\n\n\n\n\n\n#| warning: false\n#| message: false\n\nlibrary(tidyverse)\n\nggplot(data = iris, aes( x = Sepal.Length, y = Sepal.Width,\n                         shape = Species, color = Species)) +\n  geom_point()\n\n\n\n\n\nDid you notice in the code chunk the #|’s? This is how you tell the chunk how to behave, I stopped warnings and messages in that chunk. You can use Quarto as Jupyter notebooks or R Markdown notebooks and render those notebooks to your desired output. Another thing is that you can use a visual editor, all within your development environment, making it that much easier to make some beautiful deliverables or notes for yourself!"
  },
  {
    "objectID": "posts/blog-posts/welcome/index.html#so-why-quarto",
    "href": "posts/blog-posts/welcome/index.html#so-why-quarto",
    "title": "Why Quarto?",
    "section": "So why Quarto?",
    "text": "So why Quarto?\n\nLanguage agnostic for data teams\nHigh quality outputs, and many types of outputs\nFlexible workflows and ease of use\nIt is fun, and works via magic\n\nIf you are still not convinced…\n\nI encourage you to look into Quarto as it would take a dedicated blog to really do Quarto justice, as one post can only cover so much…\nHere’s a Quarto blog made with Quarto, by the Quarto team!"
  },
  {
    "objectID": "posts/blog-posts/python-oop/index.html",
    "href": "posts/blog-posts/python-oop/index.html",
    "title": "Object-Oriented Programming with Python",
    "section": "",
    "text": "As a data analyst venturing further into Python, the concepts of classes and Object-Oriented Programming (OOP) might initially appear as uncharted territory. In this blog post, I’ll take you along on my journey, sharing personal insights and discoveries as I navigated this fascinating realm.\nNow, let’s begin our exploration by demystifying classes and attributes through a fun example involving something we’re all familiar with - a pencil.\n\n\nStarting with physical objects like pencils is a great way to grasp the concept of classes and objects in Object-Oriented Programming (OOP). These tangible objects often have easily identifiable attributes and behaviors, which can be translated into class attributes and methods in Python. For this example lets imagine our pencil is a classic yellow #2 graphite pencil with a pink eraser.\nEach attribute of the pencil corresponds to a characteristic of our class.\n\ncolor represents the color of our pencil, which is ‘yellow’ in this case.\ntype signifies the type of pencil, and ‘#2 graphite’ fits perfectly.\neraser_color identifies the color of the eraser, and ‘pink’ suits our virtual pencil well.\n\nNow, let’s create our Pencil class with these attributes and explore how to utilize them effectively in Python.\nclass Pencil:\n    def __init__(self, color, pencil_type, eraser_color):\n        self.color = color\n        self.type = pencil_type\n        self.eraser_color = eraser_color\nIn this example, we initialize the Pencil class with: itself, color, pencil_type, and eraser_color. Now we can create some instances using this class.\nclassic_pencil = Pencil(\"yellow\", \"#2 graphite\", \"pink\")\nanother_pencil = Pencil(\"blue\", \"#2 graphite\", \"white\")\nThen we can access our classic_pencil’s color via print(classic_pencil.color).\nOf course the fun starts once you begin introducing methods to classes. For this example lets add some attributes such as sharpness and times used so we can start writing with our pencil. In addition to this, lets make the sharpness level decrease as it is used.\nclass Pencil:\n    def __init__(self, color, pencil_type, eraser_color):\n        self.color = color\n        self.type = pencil_type\n        self.eraser_color = eraser_color\n        self.sharpness = 100  # Sharpness is represented as a percentage\n        self.times_used = 0  # Initialize the times used counter\n\n    def sharpen(self):\n        \"\"\"\n        Simulates sharpening the pencil.\n        \"\"\"\n        self.sharpness = 100  # Sharpening restores full sharpness\n\n    def write(self, *kwargs):\n        \"\"\"\n        Simulates writing with the pencil.\n        \"\"\"\n        if self.sharpness &gt; 0:\n            self.times_used += 1\n            self.sharpness -= self.times_used * 10  # Decrease sharpness based on times used\n            if self.sharpness &lt; 0:\n                self.sharpness = 0\n            print(f\"Wrote with the pencil. Sharpness: {self.sharpness}%\")\n        else:\n            print(\"The pencil is dull. Please sharpen it.\")\nNow we can sharpen our classic_pencil with classic_pencil.sharpen() and begin to write with like so:\nclassic_pencil.write(\"Hello, world!\")\n\n#&gt;&gt; Wrote with the pencil. Sharpness: 90%\n\n\n\nNow that we’ve grasped the concept of classes and objects with our playful pencil example, let’s pivot towards a real-world scenario. Imagine you’re a data analyst working on a project that involves interacting with a remote server to fetch and manage data. In such cases, creating organized and reusable code becomes crucial.\nThis is where the next classes API and IssueAPI come into play. These classes are designed to streamline communication with a remote server’s API, making it more structured and efficient. They encapsulate the necessary functionality, just as we encapsulated attributes and behaviors in our pencil class.\nLet’s explore how these classes work in practice and how they can simplify complex tasks like fetching data from a server. By the end of this section, you’ll see how the principles of Object-Oriented Programming extend far beyond our initial pencil example, enabling you to tackle real-world data analysis challenges with confidence.\n\n\nWe will start with our API class which will take in our credentials to be used with additional classes and methods. The API class is initialized with a domain and an api_key, forming a base URL for API requests and connecting to an IssueAPI instance for issue-related operations. It also includes a domain validation check, raising an error if “example.com” is not found in the domain, indicating that the Example API is only compatible with specific domains.\nclass API(object):\n    def __init__(self, domain, api_key):\n        self._api_prefix = \"https://{}/api/\".format(domain.rstrip(\"/\"))\n        self._api_key = api_key\n        self.issues = IssueAPI(self)\n\n        # removed other attributes and methods for brevity\n\n        if domain.find(\"example.com\") &lt; 0:\n            \"\"\"\n            This checks if the domain has \"example.com\" in it. If it doesn't, it raises an error.\n\n            If it is found, it will return the index of the first occurrence of \"example.com\" in the string.\n\n            If it is not found, it will return -1 which is less than 0 and will raise an error.\n            \"\"\"\n            raise AttributeError(\n                \"Example API works only via Example\"\n                \"domains and not via custom CNAMEs\"\n            )\n        self.domain = domain\n\n\n\nNow that we’ve explored how the API class provides the foundation for interacting with a remote API, let’s delve into the IssueAPI class. This specialized class is designed to handle specific functionalities related to issues within the context of our API. It encapsulates methods for tasks like retrieving issue data, enabling you to work with issue-related information seamlessly.\nThe IssueAPI class is an essential component of our API framework. It’s responsible for handling operations that are specific to issues. This separation of concerns follows the principles of Object-Oriented Programming (OOP), making our code more organized and modular. In the upcoming sections, we’ll explore the methods provided by the IssueAPI class and see how they simplify working with issue data, ensuring that your data analysis tasks are both efficient and manageable.\nclass IssueAPI(object):\n    def __init__(self, api):\n        self._api = api\n\n    def get_issue(self, record_id, *include):\n        url = \"url/%d%s\" % (\n            record_id,\n            \"?include=%s\" % \",\".join(include) if include else \"\",\n        )\n        return url # returning url as example\n                   # can add additional code for\n                   # getting data from API with\n                   # requests and returning it\n\n\n\nIn this code snippet, we begin by creating an instance of the API class named a. This instance is configured with the domain “myapi.example.com” and an API key.\nNext, we access the issues attribute of the API instance a, which is an instance of the IssueAPI class. We call the get_issue method with arguments to fetch data for issue ID 1, and here’s where the *include parameter comes into play. The *include parameter allows us to dynamically specify what additional data we want to include in the request. In this example, we’ve included “x,” “y,” and “z” as parameters. This is where you could add different parameters to the URL to retrieve additional or specific data based on your needs. For example the “x” can be replaced with the parameter “stats” which tells the API to include all stats in the response.\nThe result of this method call is stored in the variable issue_1, and we print its value, displaying the outcome of the get_issue method, which could be a constructed URL or issue-related data. This code illustrates how both classes work together to facilitate remote data interaction in a flexible and organized manner, allowing you to customize the data you retrieve from the API.\na = API(\"myapi.example.com\", \"apikey\")\n\nissue_1 = a.issues.get_issue(1, \"x\", \"y\", \"z\")\n\nprint(issue_1)\nWith our journey through the API and IssueAPI classes complete, let’s wrap up our exploration of Object-Oriented Programming in Python and reflect on the valuable lessons learned.\n\n\n\n\nTo conclude, this exploration of Object-Oriented Programming (OOP) in Python has been a fulfilling journey. From grasping the fundamental concepts to applying them in practical scenarios such as data analysis and API interaction, the learning experience has been invaluable. OOP’s ability to organize code into neat, reusable components is both impressive and empowering. As you continue to delve into the world of OOP, remember that each class you create is like a building block, allowing you to construct intricate and efficient solutions. Embrace this newfound skill, and you’ll find that your programming journey is filled with endless opportunities and exciting challenges."
  },
  {
    "objectID": "posts/blog-posts/python-oop/index.html#objects-in-action-understanding-classes-with-pencils",
    "href": "posts/blog-posts/python-oop/index.html#objects-in-action-understanding-classes-with-pencils",
    "title": "Object-Oriented Programming with Python",
    "section": "",
    "text": "Starting with physical objects like pencils is a great way to grasp the concept of classes and objects in Object-Oriented Programming (OOP). These tangible objects often have easily identifiable attributes and behaviors, which can be translated into class attributes and methods in Python. For this example lets imagine our pencil is a classic yellow #2 graphite pencil with a pink eraser.\nEach attribute of the pencil corresponds to a characteristic of our class.\n\ncolor represents the color of our pencil, which is ‘yellow’ in this case.\ntype signifies the type of pencil, and ‘#2 graphite’ fits perfectly.\neraser_color identifies the color of the eraser, and ‘pink’ suits our virtual pencil well.\n\nNow, let’s create our Pencil class with these attributes and explore how to utilize them effectively in Python.\nclass Pencil:\n    def __init__(self, color, pencil_type, eraser_color):\n        self.color = color\n        self.type = pencil_type\n        self.eraser_color = eraser_color\nIn this example, we initialize the Pencil class with: itself, color, pencil_type, and eraser_color. Now we can create some instances using this class.\nclassic_pencil = Pencil(\"yellow\", \"#2 graphite\", \"pink\")\nanother_pencil = Pencil(\"blue\", \"#2 graphite\", \"white\")\nThen we can access our classic_pencil’s color via print(classic_pencil.color).\nOf course the fun starts once you begin introducing methods to classes. For this example lets add some attributes such as sharpness and times used so we can start writing with our pencil. In addition to this, lets make the sharpness level decrease as it is used.\nclass Pencil:\n    def __init__(self, color, pencil_type, eraser_color):\n        self.color = color\n        self.type = pencil_type\n        self.eraser_color = eraser_color\n        self.sharpness = 100  # Sharpness is represented as a percentage\n        self.times_used = 0  # Initialize the times used counter\n\n    def sharpen(self):\n        \"\"\"\n        Simulates sharpening the pencil.\n        \"\"\"\n        self.sharpness = 100  # Sharpening restores full sharpness\n\n    def write(self, *kwargs):\n        \"\"\"\n        Simulates writing with the pencil.\n        \"\"\"\n        if self.sharpness &gt; 0:\n            self.times_used += 1\n            self.sharpness -= self.times_used * 10  # Decrease sharpness based on times used\n            if self.sharpness &lt; 0:\n                self.sharpness = 0\n            print(f\"Wrote with the pencil. Sharpness: {self.sharpness}%\")\n        else:\n            print(\"The pencil is dull. Please sharpen it.\")\nNow we can sharpen our classic_pencil with classic_pencil.sharpen() and begin to write with like so:\nclassic_pencil.write(\"Hello, world!\")\n\n#&gt;&gt; Wrote with the pencil. Sharpness: 90%"
  },
  {
    "objectID": "posts/blog-posts/python-oop/index.html#practical-application-of-classes-working-with-an-api",
    "href": "posts/blog-posts/python-oop/index.html#practical-application-of-classes-working-with-an-api",
    "title": "Object-Oriented Programming with Python",
    "section": "",
    "text": "Now that we’ve grasped the concept of classes and objects with our playful pencil example, let’s pivot towards a real-world scenario. Imagine you’re a data analyst working on a project that involves interacting with a remote server to fetch and manage data. In such cases, creating organized and reusable code becomes crucial.\nThis is where the next classes API and IssueAPI come into play. These classes are designed to streamline communication with a remote server’s API, making it more structured and efficient. They encapsulate the necessary functionality, just as we encapsulated attributes and behaviors in our pencil class.\nLet’s explore how these classes work in practice and how they can simplify complex tasks like fetching data from a server. By the end of this section, you’ll see how the principles of Object-Oriented Programming extend far beyond our initial pencil example, enabling you to tackle real-world data analysis challenges with confidence.\n\n\nWe will start with our API class which will take in our credentials to be used with additional classes and methods. The API class is initialized with a domain and an api_key, forming a base URL for API requests and connecting to an IssueAPI instance for issue-related operations. It also includes a domain validation check, raising an error if “example.com” is not found in the domain, indicating that the Example API is only compatible with specific domains.\nclass API(object):\n    def __init__(self, domain, api_key):\n        self._api_prefix = \"https://{}/api/\".format(domain.rstrip(\"/\"))\n        self._api_key = api_key\n        self.issues = IssueAPI(self)\n\n        # removed other attributes and methods for brevity\n\n        if domain.find(\"example.com\") &lt; 0:\n            \"\"\"\n            This checks if the domain has \"example.com\" in it. If it doesn't, it raises an error.\n\n            If it is found, it will return the index of the first occurrence of \"example.com\" in the string.\n\n            If it is not found, it will return -1 which is less than 0 and will raise an error.\n            \"\"\"\n            raise AttributeError(\n                \"Example API works only via Example\"\n                \"domains and not via custom CNAMEs\"\n            )\n        self.domain = domain\n\n\n\nNow that we’ve explored how the API class provides the foundation for interacting with a remote API, let’s delve into the IssueAPI class. This specialized class is designed to handle specific functionalities related to issues within the context of our API. It encapsulates methods for tasks like retrieving issue data, enabling you to work with issue-related information seamlessly.\nThe IssueAPI class is an essential component of our API framework. It’s responsible for handling operations that are specific to issues. This separation of concerns follows the principles of Object-Oriented Programming (OOP), making our code more organized and modular. In the upcoming sections, we’ll explore the methods provided by the IssueAPI class and see how they simplify working with issue data, ensuring that your data analysis tasks are both efficient and manageable.\nclass IssueAPI(object):\n    def __init__(self, api):\n        self._api = api\n\n    def get_issue(self, record_id, *include):\n        url = \"url/%d%s\" % (\n            record_id,\n            \"?include=%s\" % \",\".join(include) if include else \"\",\n        )\n        return url # returning url as example\n                   # can add additional code for\n                   # getting data from API with\n                   # requests and returning it\n\n\n\nIn this code snippet, we begin by creating an instance of the API class named a. This instance is configured with the domain “myapi.example.com” and an API key.\nNext, we access the issues attribute of the API instance a, which is an instance of the IssueAPI class. We call the get_issue method with arguments to fetch data for issue ID 1, and here’s where the *include parameter comes into play. The *include parameter allows us to dynamically specify what additional data we want to include in the request. In this example, we’ve included “x,” “y,” and “z” as parameters. This is where you could add different parameters to the URL to retrieve additional or specific data based on your needs. For example the “x” can be replaced with the parameter “stats” which tells the API to include all stats in the response.\nThe result of this method call is stored in the variable issue_1, and we print its value, displaying the outcome of the get_issue method, which could be a constructed URL or issue-related data. This code illustrates how both classes work together to facilitate remote data interaction in a flexible and organized manner, allowing you to customize the data you retrieve from the API.\na = API(\"myapi.example.com\", \"apikey\")\n\nissue_1 = a.issues.get_issue(1, \"x\", \"y\", \"z\")\n\nprint(issue_1)\nWith our journey through the API and IssueAPI classes complete, let’s wrap up our exploration of Object-Oriented Programming in Python and reflect on the valuable lessons learned."
  },
  {
    "objectID": "posts/blog-posts/python-oop/index.html#embracing-the-power-of-object-oriented-programming",
    "href": "posts/blog-posts/python-oop/index.html#embracing-the-power-of-object-oriented-programming",
    "title": "Object-Oriented Programming with Python",
    "section": "",
    "text": "To conclude, this exploration of Object-Oriented Programming (OOP) in Python has been a fulfilling journey. From grasping the fundamental concepts to applying them in practical scenarios such as data analysis and API interaction, the learning experience has been invaluable. OOP’s ability to organize code into neat, reusable components is both impressive and empowering. As you continue to delve into the world of OOP, remember that each class you create is like a building block, allowing you to construct intricate and efficient solutions. Embrace this newfound skill, and you’ll find that your programming journey is filled with endless opportunities and exciting challenges."
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "Object-Oriented Programming with Python\n\n\n\n\n\n\n\nPython\n\n\nOOP\n\n\n\n\nExploring Python OOP: Code, Insights, and Discoveries.\n\n\n\n\n\n\nSep 24, 2023\n\n\n\n\n\n\n  \n\n\n\n\nCreating a ‘requirements.txt’ Inspired Function\n\n\n\n\n\n\n\nR\n\n\nPackages\n\n\n\n\nJoin me on a playful coding experiment where I create an R function inspired by Python’s requirements.txt\n\n\n\n\n\n\nSep 21, 2023\n\n\n\n\n\n\n  \n\n\n\n\nWhy Quarto?\n\n\n\n\n\n\n\nQuarto\n\n\n\n\nWhy I build my website with Quarto…\n\n\n\n\n\n\nMar 4, 2023\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Greetings! I’m Bradford, and I’ve got a bit of a data obsession. It all began when I stumbled into the world of R and decided to make it my digital playground. Over time, I’ve added Python and SQL to my toolkit, turning data analysis into a symphony of code and insight.\nBut let’s get real—data isn’t just about numbers; it’s about stories waiting to be told. I love digging into the details, uncovering hidden trends, and presenting them in a way that sparks those ‘aha’ moments we all crave. There’s something magical about turning data into actionable steps toward success.\nWhen I’m not deep in data, you’ll likely find me hiking. It’s in those moments of exploring nature that I find my creativity recharging, bringing a fresh perspective to my analytical pursuits."
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "About Me",
    "section": "Experience",
    "text": "Experience\nKinertia, LLC | Junior Data Analyst | May 2023 - present\nTopGolf | IT Team Lead | Oct 2022 - April 2023"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About Me",
    "section": "Education",
    "text": "Education\nData Analytics Bootcamp | Thinkful | June 2022 - Dec 2022\nB.A. in Sociology | Winthrop University | August 2017 - December 2021"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bradford Johnson",
    "section": "",
    "text": "Hello there! I’m a data sensemaker, deeply passionate about uncovering valuable signals within the noise of our data. My aim is to translate complex data into compelling narratives, making it accessible and understandable for any audience.\n\nReady to embark on this exciting journey together?\n\n\n Email Me  Connect with Me\n\n\n\n\n\n\nSpecialties\n\n\n\n\n | Data Visualization\n\n\nVisualizing data is more than just creating charts and graphs—it’s about communicating insights effectively. As a data visualization expert, I possess a unique blend of analytical skills and artistic flair to transform complex datasets into visually compelling and insightful representations.\n\n\n\n\n | Data Storytelling\n\n\nEvery data story is unique, just like your business needs. I’ll work closely with you to understand your specific objectives, ensuring that the visualizations I create align with your goals and resonate with your audience. My custom-tailored approach ensures data insights are presented in the most impactful way.\n\n\n\n\n | ETL Pipelines\n\n\nTired of manually managing data movements? Let me automate your ETL workflows and orchestrate data pipelines, freeing up your valuable time for more strategic tasks. I’ll set up automated data integration processes that efficiently handle data updates and keep your systems synchronized.\n\n\n\n\n | Data Cleaning & Validation\n\n\nI implement advanced data validation methodologies to verify the accuracy and integrity of your data. Through rigorous testing and validation processes, I’ll ensure your data meets predefined rules and conforms to expected patterns, reducing the risk of erroneous conclusions.\n\n\n\n\n\nGallery"
  },
  {
    "objectID": "posts/blog-posts/r-functions/index.html",
    "href": "posts/blog-posts/r-functions/index.html",
    "title": "Creating a ‘requirements.txt’ Inspired Function",
    "section": "",
    "text": "In the ever-evolving world of programming, versatility is key. As a developer, I’ve been delving deep into the world of Python virtual environments (venvs) lately, where each project gets its own pristine ecosystem of packages and dependencies. It’s an organizational dream, ensuring that changes in one project won’t disrupt the harmony of another.\n\n\nRecently, however, I decided to take a bit of a detour and dive into the world of R. I couldn’t resist the urge to play around with R and see if I could create something inspired by my recent experience within Python virtual environments even if it didn’t serve much of a practical purpose.\nThe result? A modest freeze_requirements function. This piece of code takes a file path as input and generates a requirements.txt file within the current R project. Its purpose? Well, let’s just say it’s a playful experiment more than anything else. It lists the names of currently installed R packages along with their versions in a format that might remind you of Python’s requirements.txt.\nfreeze_requirements &lt;- function(path = \"requirements.txt\") {\n  if (!endsWith(path, \".txt\")) {\n    path &lt;- paste0(path, \".txt\")\n    message(\"Appended '.txt' to the provided path.\")\n  }\n  currently_installed &lt;- data.frame(installed.packages(), row.names = NULL)\n\n  cols &lt;- c(\"Package\", \"Version\", \"Priority\")\n\n  requirements &lt;- currently_installed[, cols, drop = FALSE]\n\n  requirements &lt;- requirements[!grepl(\"base\", requirements$Priority), ]\n\n  requirements &lt;- requirements[, cols[1:2], drop = FALSE]\n\n  write.table(requirements, path, quote = FALSE, row.names = FALSE, sep = \"\\t\")\n\n  if (file.exists(path)) {\n    return(paste0(\"Saved packages to \", path))\n  } else {\n    return(paste0(\"Oops! There was an error...\"))\n  }\n}\nThe function checks if the provided path ends with .txt and appends it if necessary. Then, it gathers package information, filtering out any packages labeled as ‘base’ priority. It writes this information to the specified file path and provides a message to confirm success or offer assistance in case of any hiccups.\n\n\n\nWhile not a groundbreaking workflow, this experiment allowed me to have a bit of fun at the intersection of two programming languages. In all seriousness, for more robust dependency management in R, tools like renv are readily available and worth exploring."
  },
  {
    "objectID": "posts/blog-posts/r-functions/index.html#an-r-function-inspired-by-requirements.txt",
    "href": "posts/blog-posts/r-functions/index.html#an-r-function-inspired-by-requirements.txt",
    "title": "Creating a ‘requirements.txt’ Inspired Function",
    "section": "",
    "text": "In the ever-evolving world of programming, versatility is key. As a developer, I’ve been delving deep into the world of Python virtual environments (venvs) lately, where each project gets its own pristine ecosystem of packages and dependencies. It’s an organizational dream, ensuring that changes in one project won’t disrupt the harmony of another.\n\n\nRecently, however, I decided to take a bit of a detour and dive into the world of R. I couldn’t resist the urge to play around with R and see if I could create something inspired by my recent experience within Python virtual environments even if it didn’t serve much of a practical purpose.\nThe result? A modest freeze_requirements function. This piece of code takes a file path as input and generates a requirements.txt file within the current R project. Its purpose? Well, let’s just say it’s a playful experiment more than anything else. It lists the names of currently installed R packages along with their versions in a format that might remind you of Python’s requirements.txt.\nfreeze_requirements &lt;- function(path = \"requirements.txt\") {\n  if (!endsWith(path, \".txt\")) {\n    path &lt;- paste0(path, \".txt\")\n    message(\"Appended '.txt' to the provided path.\")\n  }\n  currently_installed &lt;- data.frame(installed.packages(), row.names = NULL)\n\n  cols &lt;- c(\"Package\", \"Version\", \"Priority\")\n\n  requirements &lt;- currently_installed[, cols, drop = FALSE]\n\n  requirements &lt;- requirements[!grepl(\"base\", requirements$Priority), ]\n\n  requirements &lt;- requirements[, cols[1:2], drop = FALSE]\n\n  write.table(requirements, path, quote = FALSE, row.names = FALSE, sep = \"\\t\")\n\n  if (file.exists(path)) {\n    return(paste0(\"Saved packages to \", path))\n  } else {\n    return(paste0(\"Oops! There was an error...\"))\n  }\n}\nThe function checks if the provided path ends with .txt and appends it if necessary. Then, it gathers package information, filtering out any packages labeled as ‘base’ priority. It writes this information to the specified file path and provides a message to confirm success or offer assistance in case of any hiccups.\n\n\n\nWhile not a groundbreaking workflow, this experiment allowed me to have a bit of fun at the intersection of two programming languages. In all seriousness, for more robust dependency management in R, tools like renv are readily available and worth exploring."
  },
  {
    "objectID": "posts/project-posts/seinfeld/index.html",
    "href": "posts/project-posts/seinfeld/index.html",
    "title": "Seinfeld Scripts",
    "section": "",
    "text": "Sentiment analysis of Seinfeld scripts\n\nPositive and negative sentiments across different lexicons\n\nIdentify “catchphrases”, common themes, and inside jokes\n\nWord frequency and relationships\n\nWord correlation\n\nHow are certain words related?\n\nWrangle and visualize insightful relationships…\n\n\n\n\n\n\n\nSeparate processes into dedicated R scripts and ‘stages’:\n\nIndividual R file for each data prep / wrangling / cleaning task\nSave wrangled and cleaned data frames as .csv’s\nLoad prepared data into dedicated visualization scripts\nSave individual visuals and final visuals\n\n\nThis workflow is done in stages for the following reasons:\n\nLighten the workload on a machine | lots of text in these data sets\nMaintain an organized work environment\nPrepared data can be saved and used in the future | version control\nErrors can be isolated\n\n\n\n\n\nunnest_tokens() | Separate text into rows of single words\nanti_join() | Drop uninteresting words (stop words)\nget_sentiment() | Evaluating 3 different lexicons:\n\nBing\nNRC\nAFINN\n\n\n\n\n\n\nBigrams: Pairs of consecutive words grouped by character with counts\n\n\nunnest_tokens(bigram) | Separate text into rows of two words\nfilter() | Remove common stop words and selected words\ncount() | Get counts of bigrams\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow to use lexicons and “tune” them for a specific need\nHow to filter words like stop words, and customize the lists of words\nUsing bigrams, trigrams, and correlation to identify common themes and trends\nHow to implement these methods to paint the bigger picture\n\n\n\n\n\n\n\nSeinfeld data\n\n\n\n\n\nFinn Årup Nielsen A new ANEW: Evaluation of a word list for sentiment analysis in microblogs. Proceedings of the ESWC2011 Workshop on ‘Making Sense of Microposts’: Big things come in small packages 718 in CEUR Workshop Proceedings 93-98. 2011 May. https://arxiv.org/abs/1103.2903.\nMinqing Hu and Bing Liu, “Mining and summarizing customer reviews.”, Proceedings of the ACM SIGKDD International Conference on Knowledge Discovery & Data Mining (KDD-2004), 2004.\nMohammad, S.M. and Turney, P.D. (2013), CROWDSOURCING A WORD–EMOTION ASSOCIATION LEXICON. Computational Intelligence, 29: 436-465. https://doi.org/10.1111/j.1467-8640.2012.00460.x"
  },
  {
    "objectID": "posts/project-posts/seinfeld/index.html#objectives",
    "href": "posts/project-posts/seinfeld/index.html#objectives",
    "title": "Seinfeld Scripts",
    "section": "",
    "text": "Sentiment analysis of Seinfeld scripts\n\nPositive and negative sentiments across different lexicons\n\nIdentify “catchphrases”, common themes, and inside jokes\n\nWord frequency and relationships\n\nWord correlation\n\nHow are certain words related?\n\nWrangle and visualize insightful relationships…"
  },
  {
    "objectID": "posts/project-posts/seinfeld/index.html#methods",
    "href": "posts/project-posts/seinfeld/index.html#methods",
    "title": "Seinfeld Scripts",
    "section": "",
    "text": "Separate processes into dedicated R scripts and ‘stages’:\n\nIndividual R file for each data prep / wrangling / cleaning task\nSave wrangled and cleaned data frames as .csv’s\nLoad prepared data into dedicated visualization scripts\nSave individual visuals and final visuals\n\n\nThis workflow is done in stages for the following reasons:\n\nLighten the workload on a machine | lots of text in these data sets\nMaintain an organized work environment\nPrepared data can be saved and used in the future | version control\nErrors can be isolated\n\n\n\n\n\nunnest_tokens() | Separate text into rows of single words\nanti_join() | Drop uninteresting words (stop words)\nget_sentiment() | Evaluating 3 different lexicons:\n\nBing\nNRC\nAFINN\n\n\n\n\n\n\nBigrams: Pairs of consecutive words grouped by character with counts\n\n\nunnest_tokens(bigram) | Separate text into rows of two words\nfilter() | Remove common stop words and selected words\ncount() | Get counts of bigrams"
  },
  {
    "objectID": "posts/project-posts/seinfeld/index.html#what-i-learned",
    "href": "posts/project-posts/seinfeld/index.html#what-i-learned",
    "title": "Seinfeld Scripts",
    "section": "",
    "text": "How to use lexicons and “tune” them for a specific need\nHow to filter words like stop words, and customize the lists of words\nUsing bigrams, trigrams, and correlation to identify common themes and trends\nHow to implement these methods to paint the bigger picture"
  },
  {
    "objectID": "posts/project-posts/seinfeld/index.html#citations",
    "href": "posts/project-posts/seinfeld/index.html#citations",
    "title": "Seinfeld Scripts",
    "section": "",
    "text": "Seinfeld data\n\n\n\n\n\nFinn Årup Nielsen A new ANEW: Evaluation of a word list for sentiment analysis in microblogs. Proceedings of the ESWC2011 Workshop on ‘Making Sense of Microposts’: Big things come in small packages 718 in CEUR Workshop Proceedings 93-98. 2011 May. https://arxiv.org/abs/1103.2903.\nMinqing Hu and Bing Liu, “Mining and summarizing customer reviews.”, Proceedings of the ACM SIGKDD International Conference on Knowledge Discovery & Data Mining (KDD-2004), 2004.\nMohammad, S.M. and Turney, P.D. (2013), CROWDSOURCING A WORD–EMOTION ASSOCIATION LEXICON. Computational Intelligence, 29: 436-465. https://doi.org/10.1111/j.1467-8640.2012.00460.x"
  }
]